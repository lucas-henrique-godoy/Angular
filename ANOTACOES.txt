								**CURSO DE ANGULAR**

Angular é um framework de desenvolvimento para criar aplicações web dinâmicas e interativas. Desenvolvido pelo Google, é baseado em JavaScript (ou TypeScript, que é uma versão tipada do JavaScript) e utiliza o conceito de "componentes" para organizar e estruturar o código.

Algumas das principais características do Angular incluem:

Componentes: São blocos reutilizáveis de código que encapsulam a lógica, a apresentação e o estilo de uma parte da interface do usuário.

Binding de Dados: O Angular permite a ligação bidirecional de dados, ou seja, alterações no modelo de dados são refletidas automaticamente na interface do usuário e vice-versa.

Injeção de Dependência: Uma maneira de organizar e gerenciar dependências entre os serviços e componentes, facilitando o desenvolvimento e manutenção do código.

Roteamento: Possui um sistema de roteamento que permite a navegação entre diferentes partes de uma aplicação de forma eficiente.

CLI (Interface de Linha de Comando): O Angular oferece uma ferramenta poderosa para a criação, desenvolvimento, testes e construção de aplicações diretamente do terminal.

Por ser robusto e escalável, o Angular é frequentemente utilizado em aplicações de grande porte, com requisitos de alta performance e manutenção.
_______________________________________________________________________________________________________________________________________________________________________

				*ESTRUTURA DO ANGULAR: 
- Vamos entender melhor o que é criado após um ng new;

- node modules: dependências do projeto;
- src: onde vamos programar a aplicação;
- src/app: pasta principal para componentes, services e etc; 
- Os componentes são divididos em partes: TS, HTML, CSS, e testes.

#OBS: O app.component é o componente principal.
_______________________________________________________________________________________________________________________________________________________________________

				*CRIANDO COMPONENTE:
- Para criar um componente podemos utilizar o CLI;
- O comando é: ng generate component <nome>
- Todos os arquivos necessários serão criados no projeto;
- Para importar o componente basta utilizar o seu selector em um HTML de outro componente;
_______________________________________________________________________________________________________________________________________________________________________

				*INTERPOLAÇÃO DE DADOS:
- A interpolação de dados é um recurso que vai nos ensinar a trabalhar com os componentes do Angular;
- Vamos criar nossas variáveis no arquivo .ts, dentro da classe;
- Ou seja, estas variáveis são propriedades da classe;
- E então teremos acesso a estes dados no arquivo .html. o template;
- A impressão é feita através de:   {{dado}}
_______________________________________________________________________________________________________________________________________________________________________

				*CSS NO ANGULAR:
- Os estilos em aplicações de Angular podem ser feitos de duas maneiras;
- GLOBAL: Utilizando o arquivo styles.css, que fica em src; Muda estilos da aplicação toda(estilos padrões).
- SCOPED: Estilos a nível de componente, criamos quando damos um generate; Muda estilos que só funcionam em um componente específico não "vazando"  para os outros.
_______________________________________________________________________________________________________________________________________________________________________

				*COMPARTILHANDO DADOS
- Em Angular podemos compartilhar dados do componente pai com o componente filho;
- Para isso vamos disponibilizar na chamada do componente o nome do dado que será recebido com a seguinte sintaxe: [dado];
- E no código .ts do componente filho vamos  utilizar o decorator @input, que tem como papel entregar o dado para o template.
_______________________________________________________________________________________________________________________________________________________________________

				*DIRETIVAS
- Em Angular temos um recurso chamado diretivas;
- Que podem realizar diversas funções no sistema, como aplicar estilos a um elemento;
- Elas começam sempre com ng, o nome fica como: ngAlgumaCoisa;
_______________________________________________________________________________________________________________________________________________________________________

				*RENDERIZAÇÃO CONDICIONAL
- É possível exibir determinado conteúdo por meio de uma condicional;
- Utilizamos a diretiva ngIf para isso;
- Os valores podem ser dinâmicos(propriedades), mas podemos realizar outros tipos de comparação;
- Há a possibilidade também de imprimir um cenário para validação de falso, com o else;
_______________________________________________________________________________________________________________________________________________________________________

				*EVENTOS
- Podemos ativar eventos nos componentes para disparar algum método;
- Um evento clássico que utilizamos muito é o click;
- A sintaxe é: (click)="algumaFuncao()"
- Os métodos ficam na classe;
- Futuramente utilizaremos este recurso para acessar uma API.
_______________________________________________________________________________________________________________________________________________________________________

				*EMITINDO EVENTOS
- Podemos comunicar eventos de  um componente filho para o pai;
- Para isso vamos  precisar do @Output, que vai fazer a saída do evento do componente filho;
- Na tag de invocação do componente no template, escolhemos um método para executar quando o evento for emitido;
- Exemplo: (emit)="onEmit()"
_______________________________________________________________________________________________________________________________________________________________________

				*RENDERIZAÇÃO DE LISTAS
- Outro recurso importante é o loop em listas;
- Para isso vamos precisar de uma propriedade com os itens da lista;
- E no template do componente vamos utilizar o *ngFor;
- A sinaxe é: *ngFor="let item of items"
- Dessa maneira podemos renderizar template baseado em dados;
_______________________________________________________________________________________________________________________________________________________________________

				*IMPORTÂNCIA DAS INTERFACES
- Toda entidade que vamos trabalhar precisa de uma interface;
- Isso vai tornar nosso código mais simples ao longo do programa;
- Padronizando ele e facilitando a manutenção;
- Vamos implementar uma interface a nossa lista de animais;
- E fazer um evento que também utilizará este recurso;
_______________________________________________________________________________________________________________________________________________________________________

				*PIPE OPERATORS
- Os pipe operators são recursos para trabalhar com strings nos templates;
- Podemos realizar diversas funções, como deixar o texto em caixa alta;
- A sintaxe é: {{ dado | algumPipeOperator }}
- Desta maneira nos poupamos de regras de CSS ou manipulação de strings com JS;
_______________________________________________________________________________________________________________________________________________________________________

				*TWO WAY DATA BINDING
- O Two way data binding é um recurso muito interessante para trabalho com formulários;
- Basicamente conseguimos alterar props e o template com o preenchimento de inputs;
- É necessário importar o FormsModule no componente principal;
- E também declarar o ngModel no input, além de preencher também o atributo name, todos com o mesmo valor;
_______________________________________________________________________________________________________________________________________________________________________

				*SERVICE
- O Service é outra parte fundamental da arquitetura do Angular
- Geralmente ficam as requisições para as APIs que utilizamos no projeto
- Precisamos criar o servisse com: ng generate servisse <nome>
- Importar no componente e iniciar no construtor
- Depois é possível acessar os métodos dele

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

* Passo a Passo Lógico para Criar e Utilizar um Service no Angular:
1- Criar o Serviço: Crie um novo serviço, que pode conter a lógica de manipulação de dados ou funcionalidades que você deseja compartilhar entre vários componentes.

2-Adicionar Métodos ao Serviço: Dentro do serviço, defina os métodos que vão realizar as operações ou manipulação de dados (como adicionar, remover, buscar, etc.).

3-Importar e Injetar o Serviço no Componente: No componente onde você deseja usar o serviço, importe o serviço e injete-o no construtor do componente. Isso permite que o componente tenha acesso aos métodos definidos no serviço.

4-Utilizar os Métodos do Serviço no Componente: No componente, utilize os métodos do serviço conforme necessário, como para realizar uma operação de remoção, adição, busca ou qualquer outra lógica definida no serviço.

5-Chamar os Métodos do Serviço a Partir da Interface (HTML): No template HTML, crie eventos (como cliques de botão) que chamam os métodos do componente, que por sua vez chamam os métodos do serviço para manipular ou atualizar os dados.
Esse é o fluxo básico para criar e utilizar um serviço no Angular.
_______________________________________________________________________________________________________________________________________________________________________

				*ANGULAR ROUTER
- Nós vamos criar um novo arquivo para declarar nossas rotas
- Nele vamos importar os módulos RouterModule e Routes
- Após a definição estas rotas precisam ser importadas em app.module.ts
- E por fim no template principal criamos as rotas
- E substituímos os componentes por: <router-outlet>
_______________________________________________________________________________________________________________________________________________________________________

				*REQUISIÇÕES HTTP
- Vamos realizar requisições HTTP nos nossos services
- Precisamos importar dois pacotes: HttpClient e HttpHeaders
- Neste exemplo utilizaremos uma API local para simular as request, com o json-server(é um pacote npm que você pode usar para criar um webservice REST JSON simulando uma API).
- Por último, é necessário inicializar o módulo HttpClientModule em app.module.ts
_______________________________________________________________________________________________________________________________________________________________________

				*CARREGANDO DADO INDIVIDUAL
-
-
-
-