                                             **CURSO DE ANGULAR LOIANE TRAINING**

 # COMPONENTE{} - É a view, ou se já o que o usuário irá ver. Junção do template, controller(comportamento) e escopo.
   Encapsula: 
     - Template: É o código HMTL que será mostrado pro usuário. Exemplo: formulário, datagrid, div,  etc.
     - Metadata: Processamento das classes.
     - Data Binding: Dado a ser mostrado na tela. É a associação dos dados que nós temos no nosso componente com os componentes que nós temos no template. Um componente consegue conversar com um template mostrando dados através do Data Binding.	
     - Comportamento da VIEW: Define como os elementos irão se comportar.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

* COMPONENTE RAIZ(Root): Tudo na aplicação é um componente. Temos um componente pai(componente Raiz) que terá tudo que tem na aplicação. Pode ser uma barra de navegação, barra lateral, lista de contatos, lista de clientes, etc. Cada componente pode ter outros componentes dentro do mesmo.

 - Como o principal objetivo do componente é mostrar dados, podemos fazer integração com o backend com um servidor.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 * SERVIÇO(Service): Como boa prática, não é de bom tom nós escrevermos código de lógica de negócio dentro do nosso componente, para isso nós utilizamos um serviço. E é o serviço que será responsável por ter toda a lógica e também se comunicar com o backend. Além disso,  o serviço(Service) também pode ser injetado em outras classes, e para isso nós utilizamos injeção de dependências do Angular.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* ROUTER: Responsável pela navegação. O Angular trabalha dom SPA(Single Page Application) - Uma página só. Mas mesmo tendo apenas uma página, isso não quer dizer que nós
não podemos ter telas diferentes. 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* DIRETIVA: Responsável por modificar elementos DOM e/ou seu comportamento.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*OBS: Sempre que abrir um repositório de um projeto Angular, rodar o comando npm install uma vez para instalar todas as dependências do projeto. Isso vai baixar todos os pacotes listados no package.json, incluindo o @angular/core. Se não der certo limpe o cache do npm e rode novamente o comando npm install.
_______________________________________________________________________________________________________________________________________________________________________

**PROBLEMA DE VERSÕES ENCONTRADO: Como estamos utilizando o Angular 15 e seguindo um curso de Angular ocorreu o seguinte problema:
A principal razão pelos problemas foi a diferença entre o uso de componentes standalone no Angular 15 e as versões anteriores, como o Angular 2. A partir do Angular 14, o conceito de componentes standalone foi introduzido, o que permite que componentes sejam usados fora de módulos (sem a necessidade de estarem dentro de um NgModule). No entanto, para o funcionamento correto dos componentes standalone, você precisa configurar corretamente os módulos e o bootstrap do seu projeto.

Aqui estão os pontos principais:

Componentes Standalone:

Em Angular 15, você pode usar componentes de forma standalone, ou seja, sem a necessidade de adicioná-los a um NgModule.
Ao definir um componente standalone, você precisa configurar a propriedade standalone: true e usar a opção imports para importar módulos necessários, como CommonModule, em vez de colocá-los dentro de um NgModule.
Exemplo de como importar um componente standalone:
typescript
Copiar
@Component({
  selector: 'app-exemplo',
  standalone: true,
  imports: [CommonModule],
  template: '<p>Componente standalone</p>',
})
export class ExemploComponent {}
Configuração do main.ts:

Quando se utiliza componentes standalone no Angular 15, o AppModule pode não ser mais necessário para o bootstrap. Em vez disso, você pode usar a função bootstrapApplication diretamente no main.ts, que é a maneira moderna de inicializar um aplicativo Angular que utiliza componentes standalone.
Para garantir que tudo funcione corretamente, o AppModule foi substituído por um bootstrap mais direto para componentes standalone.
Erro de Configuração no AppModule:

O erro que você encontrou relacionado ao bootstrap e a falta de um método ngDoBootstrap foi causado pela configuração incorreta do AppModule, uma vez que estava tentando usar componentes standalone sem a configuração apropriada.
No Angular 15, você deve usar a função bootstrapApplication() para inicializar o aplicativo corretamente com componentes standalone, como mencionei no código de exemplo.
Como você está seguindo um curso para versões mais antigas do Angular, muitos desses conceitos podem ser novos para você, pois o Angular evoluiu bastante ao longo do tempo, introduzindo recursos como componentes standalone, e modificando a forma como as aplicações são inicializadas.
